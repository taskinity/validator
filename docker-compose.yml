# 🐳 DOCKER COMPOSE - Apache Camel Groovy Validator
# Pełne środowisko testowe z usługami zewnętrznymi

version: '3.8'

# ═══════════════════════════════════════════════════════════════
# 🚀 SERVICES DEFINITION
# ═══════════════════════════════════════════════════════════════

services:
  
  # 🎯 MAIN APPLICATION
  camel-validator:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-01T00:00:00Z}
        VCS_REF: ${VCS_REF:-latest}
    image: camel-groovy-validator:latest
    container_name: camel-validator
    hostname: camel-validator
    restart: unless-stopped
    
    # Ports
    ports:
      - "${HAWTIO_PORT:-8080}:8080"      # Hawtio Dashboard
      - "${HEALTH_PORT:-9090}:9090"      # Health Check API
    
    # Environment variables
    environment:
      # Application settings
      - APP_NAME=CamelGroovyValidator
      - APP_VERSION=1.0.0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      
      # Directories
      - INPUT_DIR=/app/data/input
      - OUTPUT_DIR=/app/data/output
      - ERROR_DIR=/app/data/error
      
      # External services (pointing to other containers)
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - FTP_HOST=ftpserver
      - FTP_PORT=21
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      
      # Timing settings
      - TIMER_PERIOD=30000
      - HEALTH_CHECK_INTERVAL=30000
      - API_CHECK_PERIOD=60000
      
      # Features
      - VALIDATION_ENABLED=true
      - MONITORING_ENABLED=true
      - ENABLE_FILE_ROUTES=true
      - ENABLE_HTTP_ROUTES=true
      - ENABLE_EMAIL_ROUTES=true
      
      # Java settings
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC

    # Volume mounts
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
      - ./test-data:/app/test-data:ro
    
    # Dependencies
    depends_on:
      - mailhog
      - ftpserver
      - postgres
      - redis
      - mongodb
    
    # Networks
    networks:
      - camel-network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # ═══════════════════════════════════════════════════════════════
  # 📧 EMAIL SERVICES
  # ═══════════════════════════════════════════════════════════════
  
  # MailHog - SMTP testing server
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: camel-mailhog
    hostname: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # Web UI
    networks:
      - camel-network
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog-data:/maildir

  # ═══════════════════════════════════════════════════════════════
  # 📁 FILE TRANSFER SERVICES
  # ═══════════════════════════════════════════════════════════════
  
  # Pure-FTPd server
  ftpserver:
    image: stilliard/pure-ftpd:hardened
    container_name: camel-ftp
    hostname: ftpserver
    restart: unless-stopped
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    networks:
      - camel-network
    environment:
      - PUBLICHOST=localhost
      - FTP_USER_NAME=testuser
      - FTP_USER_PASS=testpass
      - FTP_USER_HOME=/home/ftpusers/testuser
    volumes:
      - ftp-data:/home/ftpusers
      - ftp-config:/etc/pure-ftpd

  # ═══════════════════════════════════════════════════════════════
  # 💾 DATABASE SERVICES
  # ═══════════════════════════════════════════════════════════════
  
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: camel-postgres
    hostname: postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - camel-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cameldb}
      - POSTGRES_USER=${POSTGRES_USER:-cameluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-camelpass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cameluser} -d ${POSTGRES_DB:-cameldb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: camel-redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - camel-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: camel-mongodb
    hostname: mongodb
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - camel-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-mongopass}
      - MONGO_INITDB_DATABASE=${MONGO_DB:-cameldb}
    volumes:
      - mongodb-data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ═══════════════════════════════════════════════════════════════
  # 📊 MONITORING SERVICES
  # ═══════════════════════════════════════════════════════════════
  
  # Prometheus (metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: camel-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    networks:
      - camel-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

  # Grafana (metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: camel-grafana
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - camel-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro

# ═══════════════════════════════════════════════════════════════
# 🗄️ VOLUMES DEFINITION
# ═══════════════════════════════════════════════════════════════

volumes:
  # Application data
  app-data:
    driver: local
  
  # External services data
  mailhog-data:
    driver: local
  ftp-data:
    driver: local
  ftp-config:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ═══════════════════════════════════════════════════════════════
# 🌐 NETWORKS DEFINITION
# ═══════════════════════════════════════════════════════════════

networks:
  camel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ═══════════════════════════════════════════════════════════════
# 📝 USAGE INSTRUCTIONS
# ═══════════════════════════════════════════════════════════════

# Basic commands:
# 
# Start all services:
# docker-compose up -d
#
# Start only main application:
# docker-compose up -d camel-validator
#
# View logs:
# docker-compose logs -f camel-validator
#
# Stop all services:
# docker-compose down
#
# Remove all data:
# docker-compose down -v
#
# Rebuild application:
# docker-compose build camel-validator
#
# Scale services:
# docker-compose up -d --scale camel-validator=2

# ═══════════════════════════════════════════════════════════════
# 🔗 SERVICE URLS
# ═══════════════════════════════════════════════════════════════

# After running `docker-compose up -d`, access:
#
# 🎯 Main Application:
# - Hawtio Dashboard: http://localhost:8080/hawtio
# - Health Check: http://localhost:9090/health
# - Metrics: http://localhost:9090/metrics
#
# 📧 Email Testing:
# - MailHog UI: http://localhost:8025
#
# 💾 Database Management:
# - PostgreSQL: localhost:5432 (user: cameluser, pass: camelpass)
# - Redis: localhost:6379
# - MongoDB: localhost:27017 (user: admin, pass: mongopass)
#
# 📊 Monitoring:
# - Prometheus: http://localhost:9091
# - Grafana: http://localhost:3000 (admin/admin)

# ═══════════════════════════════════════════════════════════════
# 🔧 ENVIRONMENT CONFIGURATION
# ═══════════════════════════════════════════════════════════════

# Create a .env file with:
# ENVIRONMENT=development
# POSTGRES_PASSWORD=your_secure_password
# MONGO_PASSWORD=your_secure_password
# REDIS_PASSWORD=your_secure_password
# GRAFANA_PASSWORD=your_secure_password
# BUILD_DATE=2025-01-01T00:00:00Z
# VCS_REF=latest